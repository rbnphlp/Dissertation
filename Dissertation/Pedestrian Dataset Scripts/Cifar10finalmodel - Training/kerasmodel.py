

from __future__ import print_function
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import pandas
from pandas import read_csv
import numpy
import numpy as np
import math
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import SGD
from sklearn.preprocessing import LabelEncoder
from keras.callbacks import LearningRateScheduler
import tensorflow as tf
import sklearn.model_selection as sk
from sklearn.metrics import *

IMG_SIZE=50
batch_size = 96
num_classes = 2
epochs = 5
data_augmentation = True

## Get the traind data


train_data="/home/ha46/Dropbox/Dissertation/Dissertation/FinalDataset-Change/pedestrian classification script/modelforconfusionmatrix/traindata.npy"
test_data="/home/ha46/Dropbox/Dissertation/Dissertation/FinalDataset-Change/pedestrian classification script/modelforconfusionmatrix/testdata.npy"


#train_data="C:/Users/Creem/Dropbox/Dissertation/Dissertation/FinalDataset-Change/pedestrian classification script/modelforconfusionmatrix/traindata.npy"
#test_data="C:/Users/Creem//Dropbox/Dissertation/Dissertation/FinalDataset-Change/pedestrian classification script/modelforconfusionmatrix/testdata.npy"


train_data=np.load(train_data)
test_data=np.load(test_data)


# The data, shuffled and split between train and test sets:

X= np.array([i[0] for i in train_data]).reshape(-1,IMG_SIZE,IMG_SIZE,1)## get the 1st element which is the image and the 2nd element to ge thte labels
Y=np.array([i[1]for i in train_data ]) # fit the labels for the Y daata

X=X.astype('float32')
#Y=Y.astype('float32')


x_train, x_test, y_train, y_test = sk.train_test_split(X, Y, test_size=0.2)



print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
#y_train = keras.utils.to_categorical(y_train, num_classes)
#y_test = keras.utils.to_categorical(y_test, num_classes)



model = Sequential()

model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.75))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.5))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))


## Train using a learning rate algorithm
# learning rate schedule


# initiate RMSprop optimizer
opt = keras.optimizers.SGD(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])




if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(x_train, y_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(x_test, y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=2.0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    hist=model.fit_generator(datagen.flow(x_train, y_train,

  batch_size=batch_size),
                        steps_per_epoch=x_train.shape[0] // batch_size,
                        epochs=epochs,
                        validation_data=(x_test, y_test),verbose=0)


true_vals=[]
pred_vals=[]
prob_scores=[]

def predict_values():
    for num, data in enumerate(test_data[:]):
        # cat: [1,0]
        # dog: [0,1]dircd


        # print(data)
        img_num = data[1]
        img_data = data[0]
        # print(img_num)
        # print(img_data)
        # y = fig.add_subplot(4,4,num+1)
        orig = img_data
        data = img_data.reshape(-1, IMG_SIZE, IMG_SIZE, 1)  # Rehsape the daya to be supllied correctly into tensorflow

        model_out = model.predict([data])[0]  ### produce a label of predicitions

        if np.argmax(img_num) == 1: true_vals.append(0)
        if np.argmax(img_num) == 1: prob_scores.append(
            model_out[1])  ## return the index which is the maximum argument :
        if np.argmax(img_num) == 0: true_vals.append(1)
        if np.argmax(img_num) == 0: prob_scores.append(model_out[0])

        if np.argmax(model_out) == 1:
            pred_vals.append(0)  ## return the index which is the maximum argument :
        elif np.argmax(model_out) == 0:
            pred_vals.append(1)

    return (np.array(true_vals), np.array(pred_vals), np.array(prob_scores))


# confusion_matrix







a=predict_values()

print("Accuracy ",accuracy_score(a[0], a[1]))
print("precision:",precision_score(a[0], a[1],average="weighted"))
print("roc_auc_score:",roc_auc_score(a[0], a[2]))
print("Recall:",recall_score(a[0], a[1], average='weighted'))
print(confusion_matrix(a[0], a[1]))
